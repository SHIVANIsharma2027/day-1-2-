# implementation of stack using linkedlist:


# Node class to represent each element in the stack
class Node:
    def __init__(self, data):
        self.data = data  # Store the data
        self.next = None  # Pointer to the next node

# Stack class using linked list
class Stack:
    def __init__(self):
        self.top = None  # Initialize the top of the stack as None

    # Method to check if the stack is empty
    def is_empty(self):
        return self.top is None

    # Method to push an element onto the stack
    def push(self, data):
        new_node = Node(data)  # Create a new node with the given data
        new_node.next = self.top  # Link the new node to the current top
        self.top = new_node  # Update the top to the new node
        print(f"Pushed {data} onto the stack.")

    # Method to pop an element from the stack
    def pop(self):
        if self.is_empty():
            print("Stack is empty. Cannot pop.")
            return None
        popped_node = self.top  # Get the current top node
        self.top = self.top.next  # Update the top to the next node
        print(f"Popped {popped_node.data} from the stack.")
        return popped_node.data

    # Method to peek at the top element without removing it
    def peek(self):
        if self.is_empty():
            print("Stack is empty.")
            return None
        return self.top.data

    # Method to display the stack contents
    def display(self):
        if self.is_empty():
            print("Stack is empty.")
        else:
            current = self.top
            print("Stack elements:")
            while current:
                print(current.data, end=" -> ")
                current = current.next
            print("None")

# Example usage of the stack
stack = Stack()
stack.push(10)
stack.push(20)
stack.push(30)

stack.display()

print(f"Top element is: {stack.peek()}")

stack.pop()
stack.display()

print(f"Top element is: {stack.peek()}")
